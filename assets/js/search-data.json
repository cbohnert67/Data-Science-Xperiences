{
  
    
        "post0": {
            "title": "Décomposition de Zeckendorf et jeu de Nim",
            "content": "La d&#233;composition de Zeckendorf . Si $n$ est un entier naturel, alors il existe une unique représentation de Zeckendorf de $n$. . Cette décomposition est la liste des uniques nombres de Fibonacci deux à deux distincts et non consécutifs de somme égale à $n$. . Impl&#233;mentation . def getNearestFibonacciNumber(n): &quot;&quot;&quot;Returns the greatest Fibonacci Number smaller than or equal to n.&quot;&quot;&quot; if (n == 0 or n == 1): return n f1, f2, f3 = 0, 1, 1 while (f3 &lt;= n): f1 = f2 f2 = f3 f3 = f1 + f2 return f2 def getZeckendorf(n): &quot;&quot;&quot;Returns the Zeckendorf decomposition of n.&quot;&quot;&quot; zeckendorf = [] while (n&gt;0): f = getNearestFibonacciNumber(n); zeckendorf.append(f) n = n-f return zeckendorf . zeckendorf = getZeckendorf(64) . zeckendorf . [55, 8, 1] . On vérifie bien : . sum(zeckendorf) . 64 . Application au jeu de Nim . Deux joueurs tirent à leur tour des allumettes d&#39;une boîte, avec les règles suivantes : . Chaque joueur tire à chaque fois au moins une allumette | Le premier joueur ne retire pas la totalité des allumettes au premier tour | Un joueur tire au plus deux fois le nombre d&#39;allumettes tirées par le joueur précédent | Le joueur qui retire la dernière allumette a gagné | . On peut montrer que si le nombre initial d&#39;allumettes n&#39;est pas un nombre de Fibonacci, une stratégie gagnante pour le joueur 1 consiste à tirer autant d&#39;allumettes que le plus petit terme de la décomposition de Zeckendorf du nombre d&#39;allumettes. . def playNim(n): &quot;&quot;&quot; Runs a game of Nim against computer with n not being a Fibonacci number&quot;&quot;&quot; tour = 0 joueur = 0 while True: tour += 1 tirage = getZeckendorf(n)[-1] print(&quot;Tour {} :&quot;.format(tour)) print(&quot;Joueur 1 : {} allumettes restantes.&quot;.format(n)) print(&quot;Ordinateur tire {} allumettes&quot;.format(tirage)) n -= tirage if n==0: print(&quot;Ordinateur a gagné!&quot;) break print(&quot;Joueur 2 : {} allumettes restantes.&quot;.format(n)) n -= int(input(&quot;Tirer entre 1 et {} allumettes : &quot;.format(2*tirage))) if n==0: print(&quot;Vous avez gagné!&quot;) break . playNim(60) . Tour 1 : Joueur 1 : 60 allumettes restantes. Ordinateur tire 5 allumettes Joueur 2 : 55 allumettes restantes. Tirer entre 1 et 10 allumettes : 1 Tour 2 : Joueur 1 : 54 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 52 allumettes restantes. Tirer entre 1 et 4 allumettes : 4 Tour 3 : Joueur 1 : 48 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 47 allumettes restantes. Tirer entre 1 et 2 allumettes : 1 Tour 4 : Joueur 1 : 46 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 45 allumettes restantes. Tirer entre 1 et 2 allumettes : 1 Tour 5 : Joueur 1 : 44 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 42 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 6 : Joueur 1 : 41 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 39 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 7 : Joueur 1 : 38 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 37 allumettes restantes. Tirer entre 1 et 2 allumettes : 1 Tour 8 : Joueur 1 : 36 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 34 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 9 : Joueur 1 : 33 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 32 allumettes restantes. Tirer entre 1 et 2 allumettes : 2 Tour 10 : Joueur 1 : 30 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 29 allumettes restantes. Tirer entre 1 et 2 allumettes : 2 Tour 11 : Joueur 1 : 27 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 26 allumettes restantes. Tirer entre 1 et 2 allumettes : 2 Tour 12 : Joueur 1 : 24 allumettes restantes. Ordinateur tire 3 allumettes Joueur 2 : 21 allumettes restantes. Tirer entre 1 et 6 allumettes : 6 Tour 13 : Joueur 1 : 15 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 13 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 14 : Joueur 1 : 12 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 11 allumettes restantes. Tirer entre 1 et 2 allumettes : 1 Tour 15 : Joueur 1 : 10 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 8 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 16 : Joueur 1 : 7 allumettes restantes. Ordinateur tire 2 allumettes Joueur 2 : 5 allumettes restantes. Tirer entre 1 et 4 allumettes : 1 Tour 17 : Joueur 1 : 4 allumettes restantes. Ordinateur tire 1 allumettes Joueur 2 : 3 allumettes restantes. Tirer entre 1 et 2 allumettes : 2 Tour 18 : Joueur 1 : 1 allumettes restantes. Ordinateur tire 1 allumettes Ordinateur a gagné! .",
            "url": "https://cbohnert67.github.io/Data-Science-Xperiences/jupyter/2021/12/01/Zeckendorf-et-jeu-du-nim.html",
            "relUrl": "/jupyter/2021/12/01/Zeckendorf-et-jeu-du-nim.html",
            "date": " • Dec 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Nombres Parfaits Amicaux Sociables",
            "content": "Quelques d&#233;finitions . Un nombre parfait est un nombre $n$ dont la somme de ses diviseurs propres (donc différents de $n$) est égale à $n$. . Un couple de nombre amicaux $(m,n)$ est un couple constitué de deux entiers strictement positifs distincts tels que la somme des diviseurs propre de chacun est égal à l&#39;autre. . Un nombre sociable est un élément d&#39;une chaîne sociable qui est une séquence $(a_1, dots, a_n)$ d&#39;entiers strictement positifs tels que chacun soit égal à la somme des diviseurs propres du précédent (cycliquement). . Recherche de nombres parfaits par m&#233;thode naive . On recherchera les diviseurs propres d&#39;un entier strictement positif par exhaustivité. . On testera la somme des diviseurs propres ainsi obtenus pour vérifier si un nombre $n$ est parfait. . On recherchera tous les nombres parfaits inférieurs ou égaux à un entier $N$ donné. . def getDivisors(n): &quot;&quot;&quot;Returns a list of all positive divisors of integer n&gt;0&quot;&quot;&quot; divisors = [] for i in range(1, n+1): if n % i == 0: divisors.append(i) return divisors def isPerfect(n): &quot;&quot;&quot;Returns True of n is a perfect number&quot;&quot;&quot; return (sum(getDivisors(n))-n) == n def getPerfectNumbers(N): &quot;&quot;&quot;Returns a list of all perfect numbers less than N&gt;0&quot;&quot;&quot; perfects = [] for i in range(1,N+1): if isPerfect(i): perfects.append(i) return perfects . getDivisors(124) . [1, 2, 4, 31, 62, 124] . isPerfect(124) . False . isPerfect(496) . True . Recherchons les nombres parfaits inférieurs à 100000 et mesurons le temps de calcul : . %time perfects = getPerfectNumbers(100000) . CPU times: user 3min 52s, sys: 21.9 ms, total: 3min 52s Wall time: 3min 52s . perfects . [6, 28, 496, 8128] . Les nombres parfaits inférieurs à 100000 sont 6, 28, 496 et 8128. . Le temps de calcul est assez long pour cette valeur et nous verrons ultérieurement que l&#39;on peut améliorer la rapidité de ce calcul. . Un somme particuli&#232;re . Calculons la somme des inverses des diviseurs des quelques premiers nombres parfaits : . for i in perfects: s = sum([1/d for d in getDivisors(i)]) print(&quot;n = &quot;, i, &quot;: &quot;, s) . n = 6 : 2.0 n = 28 : 2.0 n = 496 : 2.0 n = 8128 : 2.0 . On observe que cette somme vaut 2 pour les quatre premiers nombres parfaits. . Conjecturons que ce résultat est valide quelque soit le nombre parfait et démontrons le : . Soient $n$ un nombre parfait et $d_i$, $i=1, dots , k$ ses $k$ diviseurs, rangés dans l&#39;ordre croissant et où $d_1=1$ et $d_k=n$. . Notons $S = sum_{i=1}^k frac{1}{d_i}$. . En multipliant $S$ par $n$ on obtient aisement, $nS = n ( sum_{i=1}^k frac{1}{d_i}) = sum_{i=1}^k frac{n}{d_i}$. . Cette dernière somme n&#39;est autre que la somme des diviseurs de $n$ rangés dans l&#39;ordre décroissant. . Comme $n$ est un nombre parfait, la somme de ses diviseurs vaut $2n$. . D&#39;où le résultat : $S=2$. . Recherche de nombres amicaux par m&#233;thode naive . On recherchera les nombres amicaux $(m,n)$, tels que $m leq N$, pour un entier $N$ donné : . def getFriends(N): &quot;&quot;&quot;Returns a list of all friendly numbers (m,n) for a given N such that m&lt;=N&quot;&quot;&quot; friends = [] temp = [] for m in range(1,N+1): if not m in temp: s1 = sum(getDivisors(m))-m s2 = sum(getDivisors(s1))-s1 if m==s2 and m!=s1: friends.append((m, s1)) temp.append(s1) return friends . %time getFriends(100000) . CPU times: user 6min 21s, sys: 4.02 ms, total: 6min 21s Wall time: 6min 21s . [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368), (10744, 10856), (12285, 14595), (17296, 18416), (63020, 76084), (66928, 66992), (67095, 71145), (69615, 87633), (79750, 88730)] . Nous déterminons 13 paires de nombres amicaux en plus de 5min de temps de calcul. . %time getFriends(200000) . CPU times: user 26min 3s, sys: 264 ms, total: 26min 3s Wall time: 26min 6s . [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368), (10744, 10856), (12285, 14595), (17296, 18416), (63020, 76084), (66928, 66992), (67095, 71145), (69615, 87633), (79750, 88730), (100485, 124155), (122265, 139815), (122368, 123152), (141664, 153176), (142310, 168730), (171856, 176336), (176272, 180848), (185368, 203432), (196724, 202444)] . Cette fois, nous déterminons 22 couples de nombres amicaux mais en plus de 20min de temps de calcul. . Recherche de nombres sociables par m&#233;thode am&#233;lior&#233;e . On recherchera les chaînes sociables ne faisant intervenir que des nombres inférieurs à 1000000 et contenant au moins un nombre inférieur ou égal à 15000. . Notons que la somme de tous les diviseurs de $n$ (y compris $n$) s&#39;exprime : . $$s(n)= prod_{i=1}^k frac{p_i^{ alpha_i+1}-1}{p_i-1}$$ . où les $p_i$ et $ alpha_i$ sont les termes de la décomposition en facteurs premiers de $n$. . Utiliser cette expression nous permettra de réduire les temps de calculs. . def getPrimeDecomposition(n): &quot;&quot;&quot;Returns a list of all prime factors for a given integer n&gt;0&quot;&quot;&quot; primes = [] d = 2 alpha = 0 while (n%d==0): alpha += 1 n = int(n/d) if (alpha&gt;0): primes.append((d, alpha)) d = 3 while (d&lt;=n): alpha = 0 while (n%d==0): alpha += 1 n = int(n/d) if (alpha&gt;0): primes.append((d, alpha)) d += 2 return primes def getDivisorSum(n): &quot;&quot;&quot;Returns the sum of divisors of a given integer n&gt;0&quot;&quot;&quot; result = 1 decomposition = getPrimeDecomposition(n) for f in decomposition: result *= int((f[0]**(f[1]+1)-1)/(f[0]-1)) return result . getPrimeDecomposition(2) . [(2, 1)] . getPrimeDecomposition(28121964) . [(2, 2), (3, 1), (13, 1), (71, 1), (2539, 1)] . getDivisorSum(196724)-196724 . 202444 . Vérifions que l&#39;on a bien un algorithme plus rapide en recherchant à nouveau une liste de nombres amicaux : . def getFriends2(N): &quot;&quot;&quot;Returns a list of all friendly numbers (m,n) for a given N such that m&lt;=N&quot;&quot;&quot; friends = [] temp = [] for m in range(2,N+1): if not m in temp: s1 = getDivisorSum(m)-m if (s1&gt;1): s2 = getDivisorSum(s1)-s1 if m==s2 and m!=s1: friends.append((m, s1)) temp.append(s1) return friends . %time getFriends2(100000) . CPU times: user 53.4 s, sys: 4 ms, total: 53.4 s Wall time: 53.4 s . [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368), (10744, 10856), (12285, 14595), (17296, 18416), (63020, 76084), (66928, 66992), (67095, 71145), (69615, 87633), (79750, 88730)] . %time getFriends2(200000) . CPU times: user 3min 31s, sys: 96 ms, total: 3min 31s Wall time: 3min 31s . [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368), (10744, 10856), (12285, 14595), (17296, 18416), (63020, 76084), (66928, 66992), (67095, 71145), (69615, 87633), (79750, 88730), (100485, 124155), (122265, 139815), (122368, 123152), (141664, 153176), (142310, 168730), (171856, 176336), (176272, 180848), (185368, 203432), (196724, 202444)] . %time getFriends2(300000) . CPU times: user 7min 41s, sys: 156 ms, total: 7min 41s Wall time: 7min 42s . [(220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368), (10744, 10856), (12285, 14595), (17296, 18416), (63020, 76084), (66928, 66992), (67095, 71145), (69615, 87633), (79750, 88730), (100485, 124155), (122265, 139815), (122368, 123152), (141664, 153176), (142310, 168730), (171856, 176336), (176272, 180848), (185368, 203432), (196724, 202444), (280540, 365084)] . def getAliquote(n): &quot;&quot;&quot; Returns aliquote sequence of integer n&gt;0&quot;&quot;&quot; aliquote = [n] while aliquote.count(n)==1 and n&lt;1000000: n = getDivisorSum(n)-n if n==0: break aliquote.append(n) return aliquote def getSocialChains(N): &quot;&quot;&quot;Returns social chains starting with integers less than or equal to N&gt;0&quot;&quot;&quot; socials = [] temp = [] for i in range(1, N+1): a = getAliquote(i) if set(a) not in temp: if len(a[:-1])&gt;2 and 1 not in a and a[-1] == a[0]: socials.append(a) temp.append(set(a)) return socials . %time socials = getSocialChains(200000) . CPU times: user 8min 44s, sys: 180 ms, total: 8min 44s Wall time: 8min 45s . for s in socials: print(s) . [12496, 14288, 15472, 14536, 14264, 12496] [14316, 19116, 31704, 47616, 83328, 177792, 295488, 629072, 589786, 294896, 358336, 418904, 366556, 274924, 275444, 243760, 376736, 381028, 285778, 152990, 122410, 97946, 48976, 45946, 22976, 22744, 19916, 17716, 14316] . Nous avons ainsi exhibé deux chaînes sociables ne faisant intervenir que des nombres inférieurs à 1000000 et contenant au moins un nombre inférieur ou égal à 15000. .",
            "url": "https://cbohnert67.github.io/Data-Science-Xperiences/jupyter/2021/11/30/nombres-parfaits-amicaux-sociables.html",
            "relUrl": "/jupyter/2021/11/30/nombres-parfaits-amicaux-sociables.html",
            "date": " • Nov 30, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cbohnert67.github.io/Data-Science-Xperiences/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cbohnert67.github.io/Data-Science-Xperiences/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Cédric Bohnert, Strasbourg, France. .",
          "url": "https://cbohnert67.github.io/Data-Science-Xperiences/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cbohnert67.github.io/Data-Science-Xperiences/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}